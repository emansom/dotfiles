;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))


;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

;;(load-file "~/.emacs.d/lisp/dw-settings.el")

;; Load settings for the first time
;;(dw/load-system-settings)

;; Thanks, but no thanks
(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
(setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX

;; I mindlessly press ESC, so stop me from wreaking havoc
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; the t parameter apends to the hook, instead of prepending
;; this means it'd be run after other hooks that might fiddle
;; with the frame size
(add-hook 'window-setup-hook 'toggle-frame-maximized t)

(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;;(set-face-attribute 'default nil
;;                    :font "Fira Mono"
;;                    :height (dw/system-settings-get 'emacs/default-face-size)))

;; Set the fixed pitch face
;; (set-face-attribute 'fixed-pitch nil
;;                    :font "Fira Mono"
;;                    :weight 'light
;;                    :height (dw/system-settings-get 'emacs/fixed-face-size))

;; Set the variable pitch face
;; (set-face-attribute 'variable-pitch nil
                 ;; :font "Cantarell"
;;                    :font "Iosevka Aile"
;;                    :height (dw/system-settings-get 'emacs/variable-face-size)
;;                    :weight 'light)


(setq user-full-name "{{ .full_name }}"
{{- if eq .chezmoi.hostname "3500X" }}
      user-mail-address "{{ .email_corp }}")
{{- else if eq .chezmoi.hostname "E14G3" }}
      user-mail-address "{{ .email_corp }}")
{{- else }}
      user-mail-address "{{ .email_personal }}")
{{- end }}

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;; Unless local archive exists, refresh packages
(unless package-archive-contents
  (package-refresh-contents))

;; Install use-package if not installed already
(unless (package-installed-p 'use-package)
   (package-install 'use-package))
  
(require 'use-package)
;; Ensure all packages are downloaded and installed
(setq use-package-always-ensure t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-revert-avoid-polling t)
 '(auto-revert-remote-files t)
 '(auto-revert-use-notify nil)
 '(custom-safe-themes
   '("d9646b131c4aa37f01f909fbdd5a9099389518eb68f25277ed19ba99adeb7279" default))
 '(package-selected-packages
   '(org-redmine org-alert revbufs wakatime-mode magit cheatsheet simple-httpd websocket company-box company which-key lsp-treemacs lsp-ivy lsp-ui lsp-mode org-roam ivy-prescient prescient wgrep flx counsel ivy-rich ivy-hydra ivy command-log-mode use-package monokai-theme)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init	
  (setq monokai-use-variable-pitch nil)
  (load-theme 'monokai))

(use-package command-log-mode)

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-f" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)

         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :init
  (ivy-mode 1)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)

  ;; Use different regex strategies per completion command
  (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
  (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
  (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

  ;; Set minibuffer height for different commands
  (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
  (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
  (setf (alist-get 'swiper ivy-height-alist) 15)
  (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

(use-package ivy-hydra
  :defer t
  :after hydra)

(use-package ivy-rich
  :init
  (ivy-rich-mode 1)
  :after counsel
  :config
  (setq ivy-format-function #'ivy-format-function-line)
  (setq ivy-rich-display-transformers-list
        (plist-put ivy-rich-display-transformers-list
                   'ivy-switch-buffer
                   '(:columns
                     ((ivy-rich-candidate (:width 40))
                      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                      (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                     :predicate
                     (lambda (cand)
                       (if-let ((buffer (get-buffer cand)))
                           ;; Don't mess with EXWM buffers
                           (with-current-buffer buffer
                             (not (derived-mode-p 'exwm-mode)))))))))

(use-package counsel
  :demand t
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ;; ("C-M-j" . counsel-switch-buffer)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

(use-package flx  ;; Improves sorting for fuzzy-matched results
  :after ivy
  :defer t
  :init
  (setq ivy-flx-limit 10000))

(use-package wgrep)

;; Parens syntax error somewhere, too blind to spot
;;(use-package ivy-posframe
;;  :disabled
;;  :custom
;;  (ivy-posframe-width      115)
;;  (ivy-posframe-min-width  115
;;  (ivy-posframe-height     10)
;;  (ivy-posframe-min-height 10)
;;  :config
;;  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
;;  (setq ivy-posframe-parameters '((parent-frame . nil)
;;                                  (left-fringe . 8)
;;                                  (right-fringe . 8)))
;;  (Ivy-posframe-mode 1))

(use-package prescient
  :after counsel
  :config
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after prescient
  :config
  (ivy-prescient-mode 1))

(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t)
  :commands (lsp lsp-deferred))

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)

;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
;;(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
(use-package which-key
  :config
  (which-key-mode))

(use-package revbufs
  :ensure t)

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :config
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
   :hook (company-mode . company-box-mode))

;; Org-mode settings
(setq org-directory "{{ .tramp_addr }}:/Documents/org/")
(setq org-agenda-files '("{{ .tramp_addr }}:/Documents/org/"
			 "{{ .tramp_addr }}:/Zettelkasten/Journal/"))
(setq org-clock-idle-time 15)
(setq org-loop-over-headlines-in-active-region 'start-level)

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "DOING(g)" "|" "DONE(d)"))))

;; Always change the task to IN-PROGRESS.
(setq org-clock-in-switch-to-state "IN-PROGRESS")

;; Use a function to decide what to change the state to.
(setq org-clock-in-switch-to-state #'sodaware/switch-task-on-clock-start)

;; from https://www.philnewton.net/blog/automatic-org-keyword-changes/
(defun sodaware/switch-task-on-clock-start (task-state)
  "Change a task to 'IN-PROGRESS' when TASK-STATE is 'TODO'."
  (if (string= task-state "TODO")
      "IN-PROGRESS"
    task-state))

(use-package org-alert
  :ensure t)

(use-package org-redmine
  :ensure t
  :init
  (setq org-redmine-uri "{{ (bitwardenFields "item" "corp_redmine").addr.value }}")
  (setq org-redmine-auth-api-key "{{ (bitwardenFields "item" "corp_redmine").api_key.value }}"))

;(setq auto-revert-notify-exclude-dir-regexp
;      (concat
;       ;; No mounted file systems.
;       "^" (regexp-opt '("/afs/" "/media/" "/mnt" "/net/" "/tmp_mnt/" "{{ .chezmoi.homeDir }}/Zettelkasten/" "{{ .chezmoi.homeDir }}/Documenten/org/"))))

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  (setq dw/daily-note-filename "%<%Y-%m-%d>.org"
        dw/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
  :custom
  (org-roam-directory "{{ .tramp_addr }}:/Zettelkasten/")
  (org-roam-dailies-directory "Journal/")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
    '(("d" "default" plain "%?"
       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                          "#+title: ${title}\n")
       :unnarsrowed t)))
  (org-roam-dailies-capture-templates
    `(("D" "default" entry
      "* %?"
      :if-new (file+head ,dw/daily-note-filename
                         ,dw/daily-note-header))
     ("t" "task" entry
      "* TODO %?\n  %U\n  %a\n  %i"
      :if-new (file+head+olp ,dw/daily-note-filename
                             ,dw/daily-note-header
                             ("Tasks"))
      :empty-lines 1)
     ("l" "log entry" entry
      "* %<%I:%M %p> - %?"
      :if-new (file+head+olp ,dw/daily-note-filename
                             ,dw/daily-note-header
                             ("Log")))
     ("j" "journal" entry
      "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
      :if-new (file+head+olp ,dw/daily-note-filename
                             ,dw/daily-note-header
                             ("Log")))
     ("m" "meeting" entry
      "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
      :if-new (file+head+olp ,dw/daily-note-filename
                             ,dw/daily-note-header
                             ("Log")))))
  :bind (("C-c n l"   . org-roam-buffer-toggle)
         ("C-c n f"   . org-roam-node-find)
         ("C-c n d"   . org-roam-dailies-find-date)
         ("C-c n c"   . org-roam-dailies-capture-today)
         ("C-c n C r" . org-roam-dailies-capture-tomorrow)
         ("C-c n t"   . org-roam-dailies-goto-today)
         ("C-c n y"   . org-roam-dailies-goto-yesterday)
         ("C-c n r"   . org-roam-dailies-goto-tomorrow)
         ("C-c n g"   . org-roam-graph)
	 ("C-c n C-r" . org-revert-all-org-buffers)
         :map org-mode-map
         (("C-c n i" . org-roam-node-insert)
          ;("C-c n I" . org-roam-insert-immediate)
          ))
  :config
  (add-hook 'auto-save-hook 'org-save-all-org-buffers)
  (org-roam-db-autosync-mode))

;; (use-package org-roam
 ;;  :ensure t
;;  :init
;;  (setq org-roam-v2-ack t)
;;  :custom
;;  (org-roam-directory (file-truename "~/Zettelkasten"))
;;  (org-roam-completion-everywhere t)
;;  (org-roam-capture-templates
;;   '(("d" "default" plain
;;      "%?"
;;      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
;;      :unnarrowed t)))
;;  :bind (("C-c n l" . org-roam-buffer-toggle)
;;         ("C-c n f" . org-roam-node-find)
;;         ("C-c n g" . org-roam-graph)
;;         ("C-c n i" . org-roam-node-insert)
;;         ("C-c n c" . org-roam-capture)
;;         ;; Dailies
;;         ("C-c n j" . org-roam-dailies-capture-today)
;;         :map org-mode-map
;;         ("C-M-i"    . completion-at-point))
;;  :config
;;  (org-roam-db-autosync-mode))
  ;; If using org-roam-protocol
  ;; (require 'org-roam-protocol)

(add-to-list 'load-path "~/.emacs.d/private/org-roam-ui")
(load-library "org-roam-ui")

(use-package cheatsheet
  :ensure t
  :bind ("C-x c" . cheatsheet-show)
  :config
  (cheatsheet-add-group 'Shorthands
			'(:key "C" :description "alias for Ctrl")
			'(:key "S" :description "alias for Shift")
			'(:key "M" :description "alias for Alt"))
  (cheatsheet-add-group 'Common
                      '(:key "C-c C-c" :description "leave Emacs")
                      '(:key "C-x C-f" :description "open file")
		      '(:key "C-x C-e" :description "execute buffer as Emacs Lisp")
		      '(:key "C-x C-s" :description "save file")
		      '(:key "C-x k"   :description "kill buffer")
		      '(:key "C-x c"   :description "toggle cheatsheet")
		      '(:key "C-x x g" :description "load file from disk")
                      '(:key "C-Space" :description "select text")
		      '(:key "M-w"     :description "copy selection")
		      '(:key "C-y"     :description "paste")
		      '(:key "M-x customize-option" :description "visually modify init.el"))
  (cheatsheet-add-group 'Org\ Roam
	       	      '(:key "C-c n d" :description "travel through the Journalverse")
                      '(:key "C-c n c" :description "capture new note/task for today")
		      '(:key "C-c n S-c r" :description "capture new note/task for tommorow")
		      '(:key "C-c n t" :description "show notes captured today")
		      '(:key "C-c n y" :description "show notes captured yesterday")
		      '(:key "C-c n r" :description "show notes captured tommorow"))
  (cheatsheet-add-group 'Org
			'(:key "C-c C-t" :description "toggle task state (switch between TODO, DOING and DONE)")
		      '(:key "C-c n C-r" :description "reload all Org files from disk")))


(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))

(use-package wakatime-mode
  :ensure t)
